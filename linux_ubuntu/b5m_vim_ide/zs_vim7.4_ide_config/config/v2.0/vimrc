"
" All system-wide defaults are set in $VIMRUNTIME/debian.vim (usually just
" /usr/share/vim/vimcurrent/debian.vim) and sourced by the call to :runtime
" you can find below.  If you wish to change any of those settings, you should
" do it in this file (/etc/vim/vimrc), since debian.vim will be overwritten
" everytime an upgrade of the vim packages is performed.  It is recommended to
" make changes after sourcing debian.vim since it alters the value of the
" 'compatible' option.

" This line should not be removed as it ensures that various options are
" properly set to work with the Vim-related packages available in Debian.
runtime! debian.vim

" Uncomment the next line to make Vim more Vi-compatible
" NOTE: debian.vim sets 'nocompatible'.  Setting 'compatible' changes numerous
" options, so any other options should be set AFTER setting 'compatible'.
"set compatible

" Vim5 and later versions support syntax highlighting. Uncommenting the next
" line enables syntax highlighting by default.
"if has("syntax")
"	syntax on
"endif
if &t_Co > 1
	syntax on
"	syntax enable
endif

" If using a dark background within the editing area and syntax highlighting
" turn on this option as well
"set background=dark

" Uncomment the following to have Vim jump to the last position when
" reopening a file
"if has("autocmd")
"  au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif
"endif

" Uncomment the following to have Vim load indentation rules and plugins
" according to the detected filetype.
"if has("autocmd")
"  filetype plugin indent on
"endif

" The following are commented out as they cause vim to behave a lot
" differently from regular Vi. They are highly recommended though.
"set showcmd		" Show (partial) command in status line.
"set showmatch		" Show matching brackets.
"set ignorecase		" Do case insensitive matching
"set smartcase		" Do smart case matching
"set incsearch		" Incremental search
"set autowrite		" Automatically save before commands like :next and :make
"set hidden             " Hide buffers when they are abandoned
"set mouse=a		" Enable mouse usage (all modes)

" Source a global configuration file if available
"if filereadable("/etc/vim/vimrc.local")
"	source /etc/vim/vimrc.local
"endif


"zs config 注
"
"use: gg=:1,$ Enter 文件代码格式化

" 此配置在 ubuntu 13.04 vim7.4平台测试通过

"参考,http://www.vimer.cn

" 此 vim配置还有问题,需要继续研究vim的配置,和各种插件的使用;以便提高编程效率
" 插件加载太多,会导致vim运行缓慢等各种问题;建议只加载常用的插件即可


" 配置尚未解决的问题：
"1. 有时键盘影视快捷键 无法自动触发回车,vim7.3此种键盘映射是OK的,不知道为何.. 应该是配置文件中,某处配置导致的  -> 测试下来的结果,全局配置文件vimrc中会出现此问题;~/.vim/vimrc中可以正常使用。目前的解决方案: 1.建议自定义的配置都放到 ~/.vim/vimrc文件中。2.不要加载单独的 ~/.vim/vimrc配置文件,而用一个vimrc配置文件
"2. 相对行号,同时当前行 行号高亮

" 很好的配置


"常用变量
"$VIMRUNTIME
"$VIM : vim的安装的根目录.	[ad: ubuntu /usr/share/vim]
":echo $VIM
":echo $HOME
":echo $VIMRUNTIME
":scriptname

"特殊命令
"1.:version " 查看版本编译信息
"2.:let " 查看变量列表
"3.:history " 查看历史命令列表
"4.:language: " 查看当前所用语种信息，例如中文或英文
"5.:messages: " 命令行输入返回信息查询
"6.:register(s): " 查看当前所用register列表
"7.:marks: " 查看当前所用mark列表
"8.:buffers: " 查看当前所用buffer列表
"9.:script: " 查看Vim加载的依次加载的脚本路径及其名称

"1）Vim存在多个配置文件vimrc，比如/etc/vimrc，此文件影响整个系统的Vim。还有~/.vimrc，此文件只影响本用户的Vim。而且~/.vimrc文件中的配置会覆盖/etc/vimrc中的配置。这里我们只修改~/.vimrc文件。
"2）Vim的插件（plugin）安装在Vim的runtimepath目录下，你可以在Vim命令行下运行"set rtp“命令查看。这里我们选择安装在~/.vim目录，没有就创建一个。
"3）当本文说”在Vim命令行下运行cmdxx命令“时，意思是指在Vim的命令行模式下运行cmdxx命令，即在Vim的正常模式下通过输入冒号"："进入命令行模式，然后紧接着输入命令cmdxx。在后文描述中都会省略冒号"："输入。
"4）如果没有说明“在Vim命令行下运行某命令”，则是在shell中执行该命令。
"5）如果命令中间被空白符间隔或有与正文容易混淆的字符，我会用双引号将命令与正文区分。所以读者在实际操作时，不要输入命令最前面和最后面引号。
"6）本文关于组合快捷键的描述，形如a-b形式的快捷键表示同时按下a键和b键，而形如"a-b c"形式的快捷键，则表示先同时按下a键和b键，然后放开ab键，再按下c键。


"zs config
"last modify 2014-09-10
"==========================================
" Author:  zoushuai
" Version: 7.4
" Email: zoushuai518@gmail.com
" BlogPost: http://zoushuai518.github.io
" ReadMe: README.md
" Last_modify: 2014-09-10
" Sections:
"       -> Initial Plugin 加载插件
"       -> General Settings 基础设置
"       -> Display Settings 展示/排版等界面格式设置
"       -> FileEncode Settings 文件编码设置
"       -> Others 其它配置
"       -> HotKey Settings  自定义快捷键
"       -> FileType Settings  针对文件类型的设置
"       -> Theme Settings  主题设置
"       -> 插件配置和具体设置在~/.vim/vimrc中
"参考:https://github.com/wklken/k-vim
"==========================================


"==========================================
" 基础配置 
"==========================================
"
" 修改leader键,不知道啥意思
let mapleader = ','
let g:mapleader = ','

" 语法高亮
syntax enable
"开启文件类型侦测
syntax on

":set filetype
"如果 set filetype 为空,则vim语法着色失败
"
"要让vim语法高亮显示，可以用如下办法：
"1.去掉/etc/vim下vimrc中syntax on一句前面的注释符号来开启
"2.如果方法一失效可以编辑/etc下的profile文件，添加:export TERM=xterm-color
"3.拷贝语法着色示例文件:cp /usr/share/vim/vimcurrent/vimrc_example.vim ~/.vimrc
"4.在vim中输入:syntax on|enable 来开启语法着色
"参考:http://linux.chinaunix.net/techdoc/desktop/2007/10/01/969084.shtml

"set guifont=Monaco:h20          " 字体 && 字号

" history存储容量
set history=2000

" 在处理未保存或只读文件的时候，弹出确认
set confirm

" 与windows共享剪贴板 
set clipboard+=unnamed 
"粘贴时保持格式
set paste

"检测文件类型
filetype on
"针对不同的文件类型采用不同的缩进格式
filetype indent on
"允许插件
filetype plugin on
"启动自动补全
filetype plugin indent on
set completeopt=longest,menu

set autoread          " 文件修改之后自动载入。
set shortmess=atI       " 启动的时候不显示那个援助索马里儿童的提示

" 备份,到另一个位置. 防止误删, 目前是取消备份
"set backup
"set backupext=.bak
"set backupdir=/tmp/vimbk/

" 取消备份。 视情况自己改
set nobackup
" 关闭交换文件
set noswapfile


"create undo file
"set undolevels=1000         " How many undos
"set undoreload=10000        " number of lines to save for undo
"if v:version >= 730
"    set undofile                " keep a persistent backup file
"    set undodir=/tmp/vimundo/
"endif

set wildignore=*.swp,*.bak,*.pyc,*.class,.svn
set cursorcolumn		" 突出显示当前列
set cursorline          " 突出显示当前行


"设置 退出vim后，内容显示在终端屏幕, 可以用于查看和复制
"好处：误删什么的，如果以前屏幕打开，可以找回
"set t_ti= t_te=


"- 则点击光标不会换,用于复制
set mouse-=a             " 鼠标暂不启用, 键盘党....

"当文件被外部改变时自动读取
set autoread 

" 修复ctrl+m 多光标操作选择的bug，但是改变了ctrl+v进行字符选中时将包含光标下的字符
"set selection=exclusive
"set selection=inclusive
"set selectmode=mouse,key
"允许区域选择
"set selection=exclusive
"set selectmode=mouse,key

" No annoying sound on errors
" 去掉输入错误的提示声音
"set title                " change the terminal's title
"set novisualbell         " don't beep
"set noerrorbells         " don't beep
"set t_vb=
"set tm=500

" Remember info about open buffers on close"
"set viminfo^=%

" For regular expressions turn magic on
"set magic

" Configure backspace so it acts as it should act
"set backspace=eol,start,indent
"set whichwrap+=<,>,h,l


"==========================================
" Display Settings 展示/排版等界面格式设置
"==========================================
"
"显示当前的行号列号：
"设置标尺
"set ruler
""在状态栏显示正在输入的命令
set showcmd
" 左下角显示当前vim模式
set showmode
" 命令行（在状态行下）的高度，默认为1，这里是2 
set cmdheight=2 
" 使回格键（backspace）正常处理indent, eol, start等 
set backspace=2		"设置退格键可用

" 在上下移动光标时，光标的上方或下方至少会保留显示的行数
set scrolloff=7

"在被分割的窗口间显示空白，便于阅读
set fillchars=vert:\ ,stl:\ ,stlnc:\

" set winwidth=79

" 命令行（在状态行下）的高度，默认为1，这里是2
"set statusline=%<%f\ %h%m%r%=%k[%{(&fenc==\"\")?&enc:&fenc}%{(&bomb?\",BOM\":\"\")}]\ %-14.(%l,%c%V%)\ %P
"set statusline=%F%m%r%h%w\[POS=%l,%v][%p%%]\%{strftime(\"%d/%m/%y\ -\ %H:%M\")} 
" Always show the status line - use 2 lines for the status bar
" 总是显示状态行 
set laststatus=2

" 自动格式化 
set formatoptions=tcrqn 

"显示行号：
set number
" 取消换行。
"set nowrap
"自动换行
set wrap

" 括号配对情况,跳转并高亮一下匹配的括号
set showmatch
" How many tenths of a second to blink when matching brackets
set matchtime=2

"设置文内智能搜索提示
" 高亮search命中的文本。
set hlsearch
" 打开增量搜索模式,随着键入即时搜索
set incsearch
" 搜索时忽略大小写
set ignorecase
" 有一个或以上大写字母时仍大小写敏感
"set smartcase     " ignore case if search pattern is all lowercase, case-sensitive otherwise
"搜索时忽略大小写，但在有一个或以上大写字母时仍保持对大小写敏感
"set ignorecase smartcase
"用nh去掉查找后的高亮 zs注 :noh是vim的命令;可以参考这个配置来配置其它vim命令的快捷键
set ofu=syntaxcomplete#Complete

" 代码折叠
set foldenable
" 折叠方法
" manual    手工折叠
" indent    使用缩进表示折叠
" expr      使用表达式定义折叠
" syntax    使用语法定义折叠
" diff      对没有更改的文本进行折叠
" marker    使用标记进行折叠, 默认标记是 {{{ 和 }}}
set foldmethod=indent
"set foldlevel=99

" 缩进配置

set smartindent   " Smart indent
set autoindent    " 打开自动缩进
" never add copyindent, case error   " copy the previous indentation on autoindenting

" tab相关变更
set tabstop=4     " 设置Tab键的宽度        [等同的空格个数]
set shiftwidth=4  " 每一次缩进对应的空格数
set softtabstop=4 " 按退格键时可以一次删掉 4 个空格
set smarttab      " insert tabs on the start of a line according to shiftwidth, not tabstop 按退格键时可以一次删掉 4 个空格
"set expandtab     " 将Tab自动转化成空格    [需要输入真正的Tab键时，使用 Ctrl+V + Tab]
set shiftround    " 缩进时，取整 use multiple of shiftwidth when indenting with '<' and '>'
set noexpandtab        "不用space替代tab的输入
"set tabstop=4			"设定tab宽度为4个字符
"set softtabstop=4
"set shiftwidth=4		"设定自动缩进为4个字符
""set noexpandtab        "不用space替代tab的输入
""set expandtab			"用space替代tab的输入 [需要输入真正的Tab键时，使用 Ctrl+V + Tab]
""%ret! 4				"每个tab用4个space替代
"set autoindent

" A buffer becomes hidden when it is abandoned
set hidden
set wildmode=list:longest
set ttyfast

" 00x增减数字时使用十进制
"set nrformats=



"==========================================
" FileEncode Settings 文件编码,格式
"==========================================
"
" 设置新文件的编码为 UTF-8
set encoding=utf-8
"设置当前文件编码
set fileencoding=utf-8
" 自动判断编码时，依次尝试以下编码：
set fileencodings=ucs-bom,utf-8,cp936,gb18030,big5,euc-jp,euc-kr,latin1
set helplang=cn
"set langmenu=zh_CN.UTF-8
"set enc=2byte-gb18030
" 下面这句只影响普通模式 (非图形界面) 下的 Vim。
set termencoding=utf-8
"set fileformat=unix "文本格式

" Use Unix as the standard file type
set ffs=unix,dos,mac

" 如遇Unicode值大于255的文本，不必等到空格再折行。
set formatoptions+=m
" 合并两行中文时，不在中间加空格：
set formatoptions+=B


"==========================================
" others 其它设置
"==========================================
"
"autocmd! bufwritepost _vimrc source % " vimrc文件修改之后自动加载。 windows。
"autocmd! bufwritepost .vimrc source % " vimrc文件修改之后自动加载。 linux。
"autocmd! bufwritepost $HOME/.vim/vimrc source %	"zs 配置

" 自动补全配置
"让Vim的补全菜单行为与一般IDE一致(参考VimTip1228)
set completeopt=longest,menu

" 增强模式中的命令行自动完成操作
set wildmenu
" Ignore compiled files
set wildignore=*.o,*~,*.pyc,*.class

"离开插入模式后自动关闭预览窗口
autocmd InsertLeave * if pumvisible() == 0|pclose|endif
"回车即选中当前项
inoremap <expr> <CR>       pumvisible() ? "\<C-y>" : "\<CR>"

"上下左右键的行为 会显示其他信息
inoremap <expr> <Down>     pumvisible() ? "\<C-n>" : "\<Down>"
inoremap <expr> <Up>       pumvisible() ? "\<C-p>" : "\<Up>"
inoremap <expr> <PageDown> pumvisible() ? "\<PageDown>\<C-p>\<C-n>" : "\<PageDown>"
inoremap <expr> <PageUp>   pumvisible() ? "\<PageUp>\<C-p>\<C-n>" : "\<PageUp>"

" if this not work ,make sure .viminfo is writable for you
if has("autocmd")
  au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif
endif

"==========================================
" HotKey Settings  自定义快捷键设置
"==========================================

" 主要按键重定义

" 关闭方向键, 强迫自己用 hjkl
map <Left> <Nop>
map <Right> <Nop>
map <Up> <Nop>
map <Down> <Nop>

"Treat long lines as break lines (useful when moving around in them)
"se swap之后，同物理行上线直接跳
nnoremap k gk
nnoremap gk k
nnoremap j gj
nnoremap gj j

" F1 - F6 设置
" F1 废弃这个键,防止调出系统帮助
" F2 行号开关，用于鼠标复制代码用
" F3 显示可打印字符开关
" F4 换行开关
" F5 粘贴模式paste_mode开关,用于有格式的代码粘贴
" F6 语法开关，关闭语法可以加快大文件的展示

" I can type :help on my own, thanks.  Protect your fat fingers from the evils of <F1>
noremap <F1> <Esc>"

""为方便复制，用<F2>开启/关闭行号显示:
function! HideNumber()
  if(&relativenumber == &number)
    set relativenumber! number!
  elseif(&number)
    set number!
  else
    set relativenumber!
  endif
  set number?
endfunc
nnoremap <F2> :call HideNumber()<CR>
nnoremap <F3> :set list! list?<CR>
nnoremap <F4> :set wrap! wrap?<CR>
              "set paste
set pastetoggle=<F5>            "    when in insert mode, press <F5> to go to
                                "    paste mode, where you can paste mass data
                                "    that won't be autoindented

" disbale paste mode when leaving insert mode
au InsertLeave * set nopaste

nnoremap <F6> :exec exists('syntax_on') ? 'syn off' : 'syn on'<CR>


"Smart way to move between windows 分屏窗口移动
map <C-j> <C-W>j
map <C-k> <C-W>k
map <C-h> <C-W>h
map <C-l> <C-W>l

" Go to home and end using capitalized directions
"noremap H ^
"noremap L $


"Map ; to : and save a million keystrokes
" ex mode commands made easy 用于快速进入命令行
"nnoremap ; :


" 命令行模式增强，ctrl - a到行首， -e 到行尾
cnoremap <C-j> <t_kd>
cnoremap <C-k> <t_ku>
cnoremap <C-a> <Home>
cnoremap <C-e> <End>

" 搜索相关

" Map <Space> to / (search) and Ctrl-<Space> to ? (backwards search)
map <space> /
" 进入搜索Use sane regexes"
nnoremap / /\v
vnoremap / /\v

"Keep search pattern at the center of the screen."
nnoremap <silent> n nzz
nnoremap <silent> N Nzz
nnoremap <silent> * *zz
nnoremap <silent> # #zz
nnoremap <silent> g* g*zz

" switch # *
nnoremap # *
nnoremap * #

" 去掉搜索高亮
"noremap <silent><leader>/ :nohls<CR>

" --------tab/buffer相关
"  vim buffers概念,相关配置;有待研究

"Use arrow key to change buffer"
noremap <left> :bp<CR>
noremap <right> :bn<CR>

map <leader>tn :tabnew<cr>
map <leader>to :tabonly<cr>
map <leader>tc :tabclose<cr>
map <leader>tm :tabmove

" Opens a new tab with the current buffer's path
" Super useful when editing files in the same directory
map <leader>te :tabedit <c-r>=expand("%:p:h")<cr>/

" ------- 选中及操作改键

"Reselect visual block after indent/outdent.调整缩进后自动选中，方便再次操作
vnoremap < <gv
vnoremap > >gv

" y$ -> Y Make Y behave like other capitals
map Y y$

" select all
map <Leader>sa ggVG"

" select block
nnoremap <leader>v V`}

" w!! to sudo & write a file
cmap w!! w !sudo tee >/dev/null %

" kj 替换 Esc
inoremap kj <Esc>

" 滚动Speed up scrolling of the viewport slightly
nnoremap <C-e> 2<C-e>
nnoremap <C-y> 2<C-y>


"Jump to start and end of line using the home row keys
nmap t o<ESC>k
nmap T O<ESC>j

" Quickly close the current window
nnoremap <leader>q :q<CR>

" Swap implementations of ` and ' jump to markers
" By default, ' jumps to the marked line, ` jumps to the marked line and
" column, so swap them
nnoremap ' `
nnoremap ` '

" remap U to <C-r> for easier redo
nnoremap U <C-r>

" Quickly edit/reload the vimrc file
nmap <silent> <leader>ev :e $MYVIMRC<CR>
nmap <silent> <leader>sv :so $MYVIMRC<CR>

"==========================================
" FileType Settings  文件类型设置
"==========================================

" Python 文件的一般设置，比如不要 tab 等
autocmd FileType python set tabstop=4 shiftwidth=4 expandtab ai

" 保存python文件时删除多余空格
" Delete trailing white space on save, useful for Python and CoffeeScript ;)
func! DeleteTrailingWS()
  exe "normal mz"
  %s/\s\+$//ge
  exe "normal `z"
endfunc
autocmd BufWrite *.py :call DeleteTrailingWS()

" 定义函数AutoSetFileHead，自动插入文件头
autocmd BufNewFile *.sh,*.py exec ":call AutoSetFileHead()"
function! AutoSetFileHead()
    "如果文件类型为.sh文件
    if &filetype == 'sh'
        call setline(1, "\#!/bin/bash")
    endif

    "如果文件类型为python
    if &filetype == 'python'
        call setline(1, "\#!/usr/bin/env python")
        call append(1, "\# encoding: utf-8")
    endif

    normal G
    normal o
    normal o
endfunc

" F10 to run python script
nnoremap <buffer> <F10> :exec '!python' shellescape(@%, 1)<cr>

"==========================================
" Theme Settings  主题设置
"==========================================

" Set extra options when running in GUI mode
if has("gui_running")
    set guifont=Monaco:h14
    set guioptions-=T
    set guioptions+=e
    set guioptions-=r
    set guioptions-=L
    set guitablabel=%M\ %t
    set showtabline=1
    set linespace=2
    set noimd
    set t_Co=256
endif

" theme主题
"set background=dark
"colorscheme solarized
"set t_Co=16

"colorscheme molokai
"colorscheme desert

"设置标记一列的背景颜色和数字一行颜色一致
hi! link SignColumn   LineNr
hi! link ShowMarksHLl DiffAdd
hi! link ShowMarksHLu DiffChange

"" for error highlight，防止错误整行标红导致看不清
highlight clear SpellBad
highlight SpellBad term=standout ctermfg=1 term=underline cterm=underline
highlight clear SpellCap
highlight SpellCap term=underline cterm=underline
highlight clear SpellRare
highlight SpellRare term=underline cterm=underline
highlight clear SpellLocal
highlight SpellLocal term=underline cterm=underline



"加载 自定义配置文件

" install Vundle bundles
"set runtimepath+=~/.vim
"载入 自定义的vimrc配置文件; 
"载入 ~/.vim/vimrc,成功
"载入 ~/.vim/vimrc.zs,失败不知道为何
"加入失败,和的默认路径有关系;需要继续研究
if filereadable("~/.vim/vimrc")
"if filereadable("$HOME/.vim/vimrc.zs")
"if filereadable("$HOME/.vim/vimrc")
  "source $HOME/.vim/vimrc.zs
  source ~/.vim/vimrc
endif


