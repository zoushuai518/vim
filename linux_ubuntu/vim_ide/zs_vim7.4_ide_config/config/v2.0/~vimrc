"==========================================
" bundle 插件管理和配置项
"==========================================
"------------------------------------------- begin of configs --------------------------------------------
"last modify 2014-11-24
"zs备注：
"插件管理还有很多问题需要研究;
"插件管理,区别与传统的vim插件安装方式,但也可以 cp覆盖操作;插件只不过是,对vim集中管理安装,更新,加载而已
"更多插件参考:https://github.com/wklken/k-vim
"参考, http://www.vimer.cn
" 此配置在 ubuntu 13.04,14.04 vim7.4平台测试通过
" 可以复制 ~/.vim/bundle/下的插件,移植到其它机器使用


"################### 包依赖 #####################
"package dependence:  ctags
"python dependence:  pep8, pyflake
"
"非兼容vi模式。去掉讨厌的有关vi一致性模式，避免以前版本的一些bug和局限
set nocompatible
" configure Vundle
filetype off " required! turn off
set rtp+=~/.vim/bundle/vundle/
call vundle#rc()


"==========================================
" zs自己自定义高级配置
"==========================================

"################### 高级配置区块 ###################
" 启用每行超过80列的字符提示（字体变蓝并加下划线），不启用就注释掉
au BufWinEnter * let w:m2=matchadd('Underlined', '\%>' . 100 . 'v.\+', -1)

"################### 快速编辑 自定义快捷键,键盘映射区块 ###################
syntax on   "全局配置文件, vimrc中开启会vim语法高亮会导致失败,不知道为何; -> 解决方案: 1.把配置加入到 ~/.vim/vimrc文件中;2.不设置单独的 vim配置文件,只用一个即全局vimrc配置文件
":syntax enable
"map yo :syntax enable<CR>
nmap yo :syntax enable<CR>

" 用代码折叠 空格键来开关折叠
nnoremap <space> @=((foldclosed(line('.')) < 0) ? 'zc' : 'zo')<CR>
"zi打开关闭折叠
"zv 查看此行
"zm 关闭折叠
"zM 关闭所有 z + SHIFT + m
"zr 打开
"zR 打开所有 z + SHIFT + r
"zc 折叠当前行
"zo 打开当前折叠
"zd 删除折叠
"zD 删除所有折叠

" 常规模式下输入 cS 清除行尾空格
nmap cS :%s/\s\+$//g<CR>:noh<CR>

" 常规模式下输入 cM 清除行尾 ^M 符号
nmap cM :%s/\r$//g<CR>:noh<CR>

"去掉搜索高亮
nmap nh :noh<CR>

" 显示tab和空格   zs测试可用
" http://zshou.is-programmer.com/posts/39381
set list
" 设置tab和空格样式
set lcs=tab:\|\ ,nbsp:%,trail:-
" 设定行首tab为灰色
highlight LeaderTab guifg=#666666
" 匹配行首tab
match LeaderTab /^\t/
" 设定行尾tab为灰色 没效果
"highlight EndTab guifg=#666666
" 匹配行尾tab 没效果
"match EndTab /^\t/
"上面的设置将Tab显示为|(竖线)，将行尾的空格显示为-(减号)
":set list | :set nolist

" 高亮指定的列
" set cc=80
" set colorcolumn=80
"map ch :set cc=150<RETURN>
map ch :set cc=100<CR>
"按下,ch就可以将当前光标下的列高亮
"map nch :set cc=0<RETURN>
map nch :set cc=0<CR>
"按下,nch取消列高亮

" 相对行号      行号变成相对，可以用 nj  nk   进行跳转 5j   5k 上下跳5行
set relativenumber number
au FocusLost * :set norelativenumber number
au FocusGained * :set relativenumber
" 插入模式下用绝对行号, 普通模式下用相对
autocmd InsertEnter * :set norelativenumber number
autocmd InsertLeave * :set relativenumber
function! NumberToggle()
  if(&relativenumber == 1)
    set norelativenumber number
  else
    set relativenumber
  endif
endfunc
nnoremap <C-n> :call NumberToggle()<cr>

"vim自动补全括号、引号
function! InsertCompletion()
    inoremap ( ()<ESC>i
    inoremap ), (),<ESC>hi
    inoremap ); ();<ESC>hi

    inoremap [ []<ESC>i
    inoremap ], [],<ESC>hi
    inoremap ]; [];<ESC>hi

    inoremap { {}<ESC>i
    inoremap < <><ESC>i
    inoremap " ""<ESC>i
    inoremap ", "",<ESC>hi
    inoremap "; "";<ESC>hi
    inoremap ' ''<ESC>i
    inoremap ', '',<ESC>hi
    inoremap '; '';<ESC>hi
endfunc
nnoremap <C-i> :call InsertCompletion()<cr>
"zs备注：写成方法，对方法做键盘映射；可以使用此键盘映射来调用此方法,已用来确定方法内的功能是否生效

"自定义键盘映射
map s :w<CR>
map sq :wq<CR>
map sa :wqa<CR>
map qq :q!<CR>
map qa :qa!<CR>


"==========================================
" 插件管理
"==========================================
"################### 插件管理 ###################

"使用Vundle来管理插件
"zs注释：Vundle插件管理器安装的插件，有时候，插件功能会失效，Vundle有BUG
"
" vim plugin bundle control, command model
" :BundleInstall     install 安装配置的插件
" :BundleInstall!    update  更新
" :BundleClean       remove plugin not in list 删除本地无用插件
" :BundleUpdate      更新插件
" :BundleClean       清除不再使用的插件
" :BundleList        列出所有插件
" :BundleSearch      查找插件
"
" zs备注:
"git clone https://github.com/gmarik/Vundle.vim.git ~/.vim/bundle/vundle
" Vundle分为三类：
" 在Github vim-scripts 用户下的repos,只需要写出repos名称
" 在Github其他用户下的repos, 需要写出"用户名/repos名"
" 不在Github上的插件，需要写出git全路径
" -
" demo:
" " original repos on github （Github网站上非vim-scripts仓库的插件，按下面格式填写）
" Bundle 'tpope/vim-fugitive'
" Bundle 'Lokaltog/vim-easymotion'
" Bundle 'rstacruz/sparkup', {'rtp': 'vim/'}
" Bundle 'tpope/vim-rails.git'
"
" " vim-scripts repos （vim-scripts仓库里的，按下面格式填写）
" Bundle 'L9'
" Bundle 'FuzzyFinder'
"
" " non github repos （非上面两种情况的，按下面格式填写）
" Bundle 'git://git.wincent.com/command-t.git'

" 使用 Bundle 插件安装在 ~./vim/Bundle/目录下
"
"
" 参考：
" https://github.com/gmarik/Vundle.vim
" http://zuyunfei.com/2013/04/12/killer-plugin-of-vim-vundle/
" http://jianshu.io/p/mHUR4e
" http://www.cnblogs.com/merryfreespace/p/3438128.html
" http://www.cnblogs.com/xia520pi/archive/2014/04/11/3659386.html
"必须,的配置
Bundle 'gmarik/vundle'


"################### 多语言语法检查 ######################
"syntastic 一个通用的语法检查插件
Bundle 'scrooloose/syntastic'
let g:syntastic_error_symbol='>>'
let g:syntastic_warning_symbol='>'
let g:syntastic_check_on_open=1
let g:syntastic_enable_highlighting = 0
"let g:syntastic_python_checker="flake8,pyflakes,pep8,pylint"
let g:syntastic_python_checkers=['pyflakes'] " 使用pyflakes,速度比pylint快
let g:syntastic_javascript_checkers = ['jsl', 'jshint']
let g:syntastic_html_checkers=['tidy', 'jshint']
highlight SyntasticErrorSign guifg=white guibg=black

"autocmd FileType python set omnifunc=pythoncomplete#Complete  
"autocmd FileType javascrīpt set omnifunc=javascrīptcomplete#CompleteJS  
"autocmd FileType html set omnifunc=htmlcomplete#CompleteTags  
"autocmd FileType css set omnifunc=csscomplete#CompleteCSS  
"autocmd FileType xml set omnifunc=xmlcomplete#CompleteTags  
"autocmd FileType php set omnifunc=phpcomplete#CompletePHP  
"autocmd FileType c set omnifunc=ccomplete#Complete 


"################### txt.vim ######################
" 高亮显示普通txt文件（需要txt.vim脚本） 
"au BufRead,BufNewFile * setfiletype txt 


"################### mark.vim ######################
"给不同的单词高亮，表明不同的变量时很有用。（特别说明一下，vim.org上有两个Mark.vim，请使用链接中指向的那个，另外一个是有bug的）


"################### VOoM(原VOOF) ######################
"VOoM(原VOOF)：vim实现带折叠双栏树状文本管理
"http://xbeta.info/vim-voof.htm


"################### snipMate ######################
"Bundle 'snipMate'
Bundle 'msanders/snipmate.vim'
let g:snippets_dir = "~/.vim/bundle/snipmate.vim/snippets"
" snipMate       Tab智能补全
"let g:snips_author='Ruchee'
"注：上述路径是自己的安装目录，根据自己情况进行修改。
"zs注: snipMate插件一般放在 ~/.vim/目录下;snippets补全可以自定义
"研究,如何定义自己的 snippets代码片段,已添加部分


"################### UltiSnips ######################
"Bundle 'sirver/ultisnips'
"提供超强的快速生成代码段的功能(超越snipmate)
"未配置


"################### powerline 旧版状态栏增强插件 ######################
"Bundle 'Lokaltog/vim-powerline'
"set guifont=PowerlineSymbols\ for\ Powerline
"set nocompatible
"set t_Co=256
"let g:Powerline_symbols = 'fancy'


"################### vim-airline 新版状态栏增强插件 ######################
Bundle 'bling/vim-airline'
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#left_sep = ' '
let g:airline#extensions#tabline#left_alt_sep = '|'
":help airline


"################### minibufexpl.vim 多文件编辑 ######################
Bundle 'fholgado/minibufexpl.vim'
let g:miniBufExplMapWindowNavVim = 1
let g:miniBufExplMapWindowNavArrows = 1
let g:miniBufExplMapCTabSwitchBufs = 1
let g:miniBufExplModSelTarget = 1
"解决FileExplorer窗口变小问题
let g:miniBufExplForceSyntaxEnable = 1
let g:miniBufExplorerMoreThanOne=2
let g:miniBufExplCycleArround=1
"Alt + -> 打开下一个文件,zs set
"map <M-right> <ESC>:bn<RETURN>
map <A-right> <ESC>:bn<RETURN>
"Alt + <- 打开上一个文件,zs set
"map <M-left> <ESC>:bp<RETURN>
map <A-left> <ESC>:bp<RETURN>


"################### trinity.vim集成了 NERD_tree.vim SrcExpl.vim taglist.vim三个插件 ######################
"Bundle 'Trinity'
"Bundle 'SrcExpl'
"Bundle 'taglist.vim'

"" Open and close all the three plugins on the same time
"nmap <F8>   :TrinityToggleAll
"" Open and close the srcexpl.vim separately 
"" Open and close the taglist.vim separately 
"nmap <F10>  :TrinityToggleTagList
"" Open and close the NERD_tree.vim separately 
"nmap <F11>  :TrinityToggleNERDTree
"nmap tts :TrinityToggleSourceExplorer<CR>


"###################  SrcExpl 独立与 Trinity ######################
"https://github.com/wesleyche/SrcExpl
Bundle 'SrcExpl'
nmap ts :SrcExplToggle<CR>
" // Set the height of Source Explorer window 
let g:SrcExpl_winHeight = 8 

" // Set 100 ms for refreshing the Source Explorer 
let g:SrcExpl_refreshTime = 100 

" // Set "Enter" key to jump into the exact definition context 
let g:SrcExpl_jumpKey = "<ENTER>" 

" // Set "Space" key for back from the definition context 
let g:SrcExpl_gobackKey = "<SPACE>" 

" // In order to avoid conflicts, the Source Explorer should know what plugins
" // except itself are using buffers. And you need add their buffer names into
" // below listaccording to the command ":buffers!"
"let g:SrcExpl_pluginList = [ 
"        \"__Tag_List__" 
"        \"_NERD_tree_" 
"    \] 

" // Enable/Disable the local definition searching, and note that this is not 
" // guaranteed to work, the Source Explorer doesn't check the syntax for now. 
" // It only searches for a match with the keyword according to command 'gd' 
let g:SrcExpl_searchLocalDef = 1 

" // Do not let the Source Explorer update the tags file when opening 
let g:SrcExpl_isUpdateTags = 0 

" // Use 'Exuberant Ctags' with '--sort=foldcase -R .' or '-L cscope.files' to 
" // create/update the tags file 
"let g:SrcExpl_updateTagsCmd = "ctags --sort=foldcase -R ." 
"map <C-F12> :!ctags --sort=foldcase -R .

" // Set "<F12>" key for updating the tags file artificially 
" 创建 tags文件; linux命令行 ctags -R *
" 更新 tags文件
" 需要开启 SrcExpl方可执行更新
let g:SrcExpl_updateTagsKey = "<F12>" 

" // Set "<F3>" key for displaying the previous definition in the jump list 
"let g:SrcExpl_prevDefKey = "<F3>" 

" // Set "<F4>" key for displaying the next definition in the jump list 
"let g:SrcExpl_nextDefKey = "<F4>"


"################### NERT_Tree 目录树插件 独立与 Trinity ######################
Bundle 'scrooloose/nerdtree'
"map <F1> :NERDTreeToggle
""map <C-F1> :NERDTreeFind
let NERDTreeChDirMode=2  "选中root即设置为当前目录
""let NERDTreeQuitOnOpen=1 "打开文件时关闭树
let NERDTreeShowBookmarks=1 "显示书签
""let NERDTreeMinimalUI=1 "不显示帮助面板
let NERDTreeDirArrows=1 "目录箭头 1显示箭头  0传统+-|号
""map <F3> :NERDTreeToggle
"ne快捷键
nmap ne :NERDTreeToggle<CR>


"################### taglist.vim 源码追踪,要配合 ctags,依赖与tags文件 独立与 Trinity ######################
Bundle 'taglist.vim'
"let Tlist_Ctags_Cmd="/usr/bin/ctags"       "linux 下 ctags执行文件目录
"Taglist s
"map <silent> <leader>tl :TlistToogle<cr>
let Tlist_Auto_Highlight_Tag = 1
let Tlist_Auto_Open = 1
let Tlist_Auto_Update = 1
let Tlist_Close_On_Select = 0
let Tlist_Compact_Format = 0
let Tlist_Display_Prototype = 0
let Tlist_Display_Tag_Scope = 1
let Tlist_Enable_Fold_Column = 0
let Tlist_Exit_OnlyWindow = 0
let Tlist_File_Fold_Auto_Close = 0
let Tlist_GainFocus_On_ToggleOpen = 1
let Tlist_Hightlight_Tag_On_BufEnter = 1
let Tlist_Inc_Winwidth = 0
let Tlist_Use_Right_Window = 1
"map <F4> :TlistToggle<CR>     "F4快捷键,zs set
map tl :TlistToggle<CR>       "tl快捷键,

let Tlist_Show_One_File = 1            "不同时显示多个文件的tag，只显示当前文件的
let Tlist_Exit_OnlyWindow = 1          "如果taglist窗口是最后一个窗口，则退出vim
let Tlist_Use_Right_Window = 1         "在右侧窗口中显示taglist窗口
"map <silent> <F9> :TlistToggle<cr>
"Taglist e

"Ctags 生成的tags文件路径
set tags=/var/www/html/b5msite/cart/tags
" 增强检索功能
"set tags=./tags,./../tags,./**/tags
"use
"Taglist 的一系列命令 :Tlist 等
"Ctrl + ] 跳转到源
"Ctrl + t 跳转到调用处


"################### Tag majutsushi/tagbar ######################
"必装,标签导航,纬度和taglist不同, taglist的替代者
"tagbar插件,优于taglist.vim插件
" [sd] <F9> 打开
"Bundle 'Tag majutsushi/tagbar'


"vim 主题 : http://cocopon.me/app/vim-color-gallery/
"
"################### solarized 主题 ######################
Bundle 'altercation/vim-colors-solarized'
set background=dark
colorscheme solarized
set t_Co=16
" 增强显示配置
"let g:solarized_termtrans=1
"let g:solarized_contrast="normal"
"let g:solarized_visibility="normal"
"zs备注:还需要执行 solarized主题的脚本文件方可
"solarized.sh && vim/linux_ubuntu/b5m_vim_ide/solarized.sh


"################### molokai 主题 ######################
""Bundle 'molokai'
"Bundle 'tomasr/molokai'
""set background=dark
""colorscheme molokai
"let g:molokai_original = 1
"let g:rehash256 = 1
"设置失败,fuck


"################### neocomplcache 自动补全插件 ######################
"此插件会导致 vim报错,暂时没有解决,使用 vim autocomplpop插件代替
"Bundle 'neocomplcache'
"let g:neocomplcache_enable_at_startup = 1


"################### autocomplpop 自动补全插件 ######################
"autocomplpop自动补全插件,优于 neocomplcache自动补全插件
Bundle 'esukram/autocomplpop.vim'


"################### Omnicppcomplete 添加代码补全功能,需要 Ctags工具生成tags文件 ######################
"类比与 taglist、tagbar 等插件
"OmniCppComplete一般和 autocomplpop一起出现
Bundle 'OmniCppComplete'
"set nocp
"inoremap ( ()<ESC>i
"inoremap ) <c-r>=ClosePair(')')<CR>
"inoremap { {}<ESC>i
"inoremap } <c-r>=ClosePair('}')<CR>
"inoremap [ []<ESC>i
"inoremap ] <c-r>=ClosePair(']')<CR>
"inoremap < <><ESC>i
"inoremap > <c-r>=ClosePair('>')<CR>
"inoremap " ""<ESC>i
"inoremap ' ''<ESC>i
"map <C-F12> :!ctags -R --c++-kinds=+p --fields=+iaS --extra=+q .
"set tags=/var/www/html/b5msite/cart/tags
"以后出现对象的　”.” 或　”- 时它自动寻找成员函数。

"onmicppcompete功能：
"命名空间(namespace),类(class),结构(struct)和联合(union)补全
"函数属性成员和返回值类型补全
"this"指针成员补全
"C/C++类型转换(cast)对象补全
"类型定义(typedef)和匿名类型(anonymous types)补全
"
"启动Vim后使用以下命令为Vim添加omnicppcomplete帮助信息
":helptags ~/.vimrc/doc
"
"使用ctags生成标签库: ctags -R --c++-kinds=+p --fields=+iaS --extra=+q .        |简单命令: :!ctags -R .     |c++语言需要添加单独的参数
"键盘映射快捷键配置: map <C-F12> :!ctags -R --c++-kinds=+p --fields=+iaS --extra=+q .
"
"在配置好Vim，并生成了ctags标签库前提条件下，Vim中在输入 “xxx." 或者 "xxx->" 时会弹出如下补全提示
" 符号类型
" 符号的类型，可能的值为
" c : 类(class)
" d : 宏(macro definition)
" e : 枚举值(enumeator)
" f : 函数(function)
" g : 枚举类型名称
" m : 类/结构/联合成员(member)
" n : 命名空间(namespace)
" p : 函数原型(function prototype)
" s : 结构体名称(structure name)
" t : 类型定义(typedef)
" u : 联合名(union name)
" v : 变量定义(variable defination)
" 访问控制
" 类成员访问控制，取值：
" + : 公共(public)
" # : 保护(protected)
" - : 私有(private)
"
"OmniCpp_GlobalScopeSearch : 全局查找控制。0:禁止；1:允许(缺省)
"OmniCpp_NamespaceSearch : 命名空间查找控制。
"0 : 禁止查找命名空间
"1 : 查找当前文件缓冲区内的命名空间(缺省)
"2 : 查找当前文件缓冲区和包含文件中的命名空间
"OmniCpp_DisplayMode : 类成员显示控制(是否显示全部公有(public)私有(private)保护(protected)成员)。
"0 : 自动
"1 : 显示所有成员
"OmniCpp_ShowScopeInAbbr : 选项用来控制匹配项所在域的显示位置。缺省情况下，omni显示的补全提示菜单中总是将匹配项所在域信息显示在缩略信息最后一列。
"0 : 信息缩略中不显示匹配项所在域(缺省)
"1 : 显示匹配项所在域，并移除缩略信息中最后一列
"OmniCpp_ShowPrototypeInAbbr : 是否是补全提示缩略信息中显示函数原型。
"0 : 不显示(缺省)
"1 : 显示原型
"OmniCpp_ShowAccess : 是否显示访问控制信息('+', '-', '#')。0/1, 缺省为1(显示)
"OmniCpp_DefaultNamespaces : 默认命名空间列表，项目间使用','隔开。
"如：let OmniCpp_DefaultNamespaces = ["std', "MyNamespace"]
"OmniCpp_MayCompleteDot : 在'.'号后是否自动运行omnicppcomplete给出提示信息。0/1, 缺省为1
"OmniCpp_MayCompleteArray : 在"->"后是否自动运行omnicppcomplete给出提示信息。0/1, 缺省为1
"OmniCpp_MayCompleteScope : 在域标识符"::"后是否自动运行omnicppcomplete给出提示信息。0/1, 缺省为0
"OmniCpp_SelectFirstItem : 是否自动选择第一个匹配项。仅当"completeopt"不为"longest"时有效。
"0 : 不选择第一项(缺省)
"1 : 选择第一项并插入到光标位置
"2 : 选择第一项但不插入光标位置
"OmniCpp_LocalSearchDecl : 使用Vim标准查找函数/本地(local)查找函数。Vim内部用来在函数中查找变量定义的函数需要函数括号位于文本的第一列，而本地查找函数并不需要。


"################### " :AuthorInfoDetect  自动添加作者、时间等信息，本质是NERD_commenter && authorinfo 的结合 ######################
"目前AuthorInfo是支持c,cpp,java,php,python,bash,makefile等等多种语言，基本上只要NERD Commenter支持的类型，AuthorInfo都默认支持
"https://github.com/ihacklog/AuthorInfo     "亲测可用,http://www.vimer.cn
" AuthorInfo 文件头注释没有会创建,如果有会更新
"更多 AuthorInfo配置,有待研究

"提供快速注释/反注释代码块的功能
Bundle 'The-NERD-Commenter'

"authorinfo 自动生成/更新文件的作者信息
Bundle 'ihacklog/AuthorInfo'
"let g:authorinfo_author='weiyan'
"let g:authorinfo_email='weiyan@b5m.com'
"let g:authorinfo_company='http://www.b5m.com'
let g:vimrc_author='shuai.zou'
let g:vimrc_email='shuai.zou@weimob.com'
let g:vimrc_homepage='http://www.weimob.com'
"Ctrl + a
nmap <C-a> :AuthorInfoDetect<CR>
"" Ctrl + E            一步加载语法模板和作者、时间信息
"map <c-e> <ESC>:LoadTemplate<CR><ESC>:AuthorInfoDetect<CR><ESC>Gi
"imap <c-e> <ESC>:LoadTemplate<CR><ESC>:AuthorInfoDetect<CR><ESC>Gi
"vmap <c-e> <ESC>:LoadTemplate<CR><ESC>:AuthorInfoDetect<CR><ESC>Gi


"################### doxygen 快速添加注释 ######################
"http://www.doxygen.org/
Bundle 'DoxygenToolkit.vim'
"定制输出脚本，在脚本文件中，在.vimrc中设置g: DoxygenToolkit_*变量：
let g:DoxygenToolkit_commentType="PHP"
let g:DoxygenToolkit_briefTag_pre="@Synopsis "
let g:DoxygenToolkit_paramTag_pre="@param "
let g:DoxygenToolkit_returnTag="@returns "
let g:DoxygenToolkit_blockHeader="--------------------------------------------------------------------------" 
let g:DoxygenToolkit_blockFooter="----------------------------------------------------------------------------" 
let g:DoxygenToolkit_authorName="shuai.zou"
let g:DoxygenToolkit_licenseTag="My own license"
"let g:DoxygenToolkit_licenseTag="My own license"   <-- !!! Does not end with "\<enter>"
"
"使用：
":DoxLic    添加许可
":Dox       添加函数/类注释
":DoxAuthor 添加作者信息
"
"zs: doxygen 注释插件配置,还要需研究


"################### tabular 赋值语句代码对齐 ######################
"将代码,或者json等,进行对齐,具体见 tabular-vim
"https://github.com/godlygeek/tabular
Bundle 'Tabular'
map t= :Tabularize /=<CR>
"zs use
"V 选择要对齐的行
"按 : 进入命令模式; 此时命令行会显示 :'<,'>
"输出对齐命令: Tabularize /=
"此时 命令行 如下
":'<,'>Tabularize /=
"直接回车即可 按照 = 对齐
"
"map <F6> :Tabularize /=<CR>        "F6快捷键,zs set


"################### delimitMate 引号配对补全 ######################
"附:同类插件 kana/vim-smartinput
Bundle 'Raimondi/delimitMate'


"################### vim-multiple-cursors 多光标选中编辑 ######################
"多光标批量操作
"[sd]
"ctrl + m 开始选择
"ctrl + p 向上取消
"ctrl + x 跳过
"esc   退出
"不知道如何使用
"
"Bundle 'vim-multiple-cursors'
""let g:multi_cursor_use_default_mapping=0
"" Default mapping
"let g:multi_cursor_next_key='<C-n>'
"let g:multi_cursor_prev_key='<C-p>'
"let g:multi_cursor_skip_key='<C-x>'
"let g:multi_cursor_quit_key='<Esc>'
"" Map start key separately from next key
""let g:multi_cursor_start_key='<F6>'


"k-vim uninstall

"################### kien/ctrlp.vim 搜索 ######################
"文件搜索,ack/Command-T需要依赖于外部包,不喜欢有太多依赖的,除非十分强大
"http://kien.github.io/ctrlp.vim/
"[sd] ,p  打开ctrlp搜索
"[sd] ,f  相当于mru功能，show recently opened files
"ctrl + j/k 进行上下移动
"ctrl + x/v 分屏打开该文件
"ctrl + t   在新tab中打开该文件
"Bundle 'kien/ctrlp.vim'


"################### docunext/closetag.vim html/xml标签配对补全 ######################
"Bundle 'docunext/closetag.vim'


"################### tpope/vim-surround +tpope/vim-repeat 快速编辑 ######################
"必装，很给力的功能，快速给词加环绕符号,例如引号
"repeat进行增强,'.'可以重复命令
"[d]
"cs"' [inside]
""Hello world!" -> 'Hello world!'
"ds"
"Hello world!" -> Hello world!
"ysiw"
"Hello -> "Hello"
"Bundle 'tpope/vim-surround'
"Bundle 'tpope/vim-repeat'


"################### bronson/vim-trailing-whitespace 去行尾空格 ######################
"将代码行最后无效的空格标红
"Bundle 'bronson/vim-trailing-whitespace'


"################### Lokaltog/vim-easymotion 位置跳转 ######################
"必装，效率提升杀手锏，跳转到光标后任意位置
"配置(我的leader键配置 let g:mapleader = ',')
",, + w  跳转
",, + fe  查找'e',快速跳转定位到某个字符位置
"Bundle 'Lokaltog/vim-easymotion'


"################### sjl/gundo.vim 文件时光机 ######################
"编辑文件时光机
"[sd] ,h  查看文件编辑历史
"Bundle 'sjl/gundo.vim'


"################### kien/rainbow_parentheses.vim 括号上色高亮 ######################
"Bundle 'kien/rainbow_parentheses.vim'

"k-vim uninstall


"################### Calendar 日历插件 ######################
"github地址: https://github.com/itchyny/calendar.vim
"itchyny/calendar.vim & richardlee8681/calendar.vim 是两种不同的日历格式插件
Bundle 'itchyny/calendar.vim'
"Bundle 'richardlee8681/calendar-vim'
let g:calendar_diary = "~/diary" " 设置日记的存储路径
let g:calendar_monday = 1 "以星期一为开始
let g:calendar_focus_today = 1 " 光标在当天的日期上
let g:calendar_mark = 'left-fit' "可以让*和数字可靠近
"use
":Calendar
":Calendar 2000 1 1
":Calendar -view=year
":Calendar -view=year -split=vertical -width=27
":Calendar -view=year -split=horizontal -position=below -height=12
":Calendar -first_day=monday
":Calendar -view=clock


"################### TODO关键字列表 ######################
"Bundle 'TaskList.vim'


"################### other config ######################
"日常自定义配置,炫酷的配置

"主题透明
"Bundle 'rkitover/256_darkdot_vim'
"colors 256_darkdot
"普通文本编辑插件
"会提示错误, 应该是缺少 Vim misc
"Bundle 'notes.vim'



"==========================================
" 不同语言 ide配置
"==========================================

"################### php ide config ######################
"php缩进
let PHP_autoformatcomment=1

autocmd FileType php set omnifunc=phpcomplete#CompletePHP
set ofu=syntaxcomplete#Complete

"php语法检查
"setlocal makeprg=\/usr/bin/php\ -l\ -n\ -d\ html_errors=off\ %
"setlocal errorformat=%m\ in\ %f\ on\ line\ %l
"autocmd BufWritePost *.php,*.phps :make
"map :w:noh:make

"Disable phpsyntax based indenting for .php files
"au BufRead,BufNewFile *.php      set indentexpr= | set smartindent
"au BufRead,BufNewFile *.phps     set filetype=php

"################### php.vim php语法高亮插件,新版本vim已经集成 ######################
Bundle 'jqlblue/php-vim'

"################### php assistant | php语法增强插件 ######################
"Ctrl + k,查看函数如何使用
"assistant.vim line27
"C-k快捷键冲突，修改为A-k
Bundle 'assistant'

"################### php phpmanual | php手册 ######################
"Bundle 'phpmanual'
"select content, and then press SHIFT-k to view the Explanation of the content
"select content, and then press CTRL-ALT-k to see the online manual of the content
"实际使用价值不如 assistant插件
Bundle 'alvan/vim-phpmanual'

"################### php PHPSyntaxCheck | php语法检查插件 ######################
"This is a mirror of http://www.vim.org/scripts/script.php?script_id=4984
"PHP语法检查插件
"在PHP文件保存时会自动进行语法检查，有错误会提示，没有错误不提示。
"*语法检查使用系统的php -l -n命令；
"*对非PHP文件不起作用；
"详见：
"http://blog.quanhz.com/archives/393
"
" zs其实就是一个函数,函数原型如下
autocmd BufWritePost *.php call PHPSyntaxCheck()
if !exists('g:PHP_SYNTAX_CHECK_BIN')
    "zs: 把php可执行文件,ln到 /usr/local/bin/文件夹下,即使php全局可执行
    let g:PHP_SYNTAX_CHECK_BIN = 'php'
endif

function! PHPSyntaxCheck()
    let result = system(g:PHP_SYNTAX_CHECK_BIN.' -l -n '.expand('%'))
    if (stridx(result, 'No syntax errors detected') == -1)
        echohl WarningMsg | echo result | echohl None
    endif
endfunction
"zs通过 Bundle加载失败,不知道为何,所以把函数原型贴过来,可以正常使用
"Bundle 'PHPSyntaxCheck'

"################### PHP-dictionary| php字典 实现函数补全 ######################
Bundle 'PHP-dictionary'
au FileType php call AddPHPFuncList()
function AddPHPFuncList()
    "配置 字典文件路径
    set dictionary-=$HOME/.vim/bundle/PHP-dictionary/PHP.dict dictionary+=$HOME/.vim/bundle/PHP-dictionary/PHP.dict
    "快捷键映射,<C-X><C-K>; 此处Ctrl + k快捷键可能会和 assistant插件的 Ctrl + k快捷键冲突
    set complete-=k complete+=k
endfunction
"只有当文件类型是php的时候（无论你是打开一个.php文件，或者new xx.php，或者setf php），才会加载PHP.dict的词典
"
"补充,以下 vim自动补全方式仅供参考
"Vim支持的自动完成种类实际上是很多
"
"1.关键字补全，按键是:
"FORWARD:   <C-X><C-N>
"BACKWARD:  <C-X><C-P>
"2.整行补全，按键是:
"<C-X><C-L>
"3.文件名补全，按键是:
"<C-X><C-F>
"4.字典补全，按键是（杯具啊，为了这个<C-K>，我把原来的C-K映射都给删掉了）:
"<C-X><C-K>
"5.全能补全，(可能要配合 omnicppcomplete插件) 按键是：
"<C-X><C-O>
"
"vim中的补全
"整行补全 CTRL-X CTRL-L
"根据当前文件里关键字补全 CTRL-X CTRL-N
"根据字典补全 CTRL-X CTRL-K
"根据同义词字典补全 　_CTRL-X CTRL-T_
"根据头文件内关键字补全 CTRL-X CTRL-I
"根据标签补全 CTRL-X CTRL-]
"补全文件名 CTRL-X CTRL-F
"补全宏定义 CTRL-X CTRL-D
"补全vim命令 CTRL-X CTRL-V
"用户自定义补全方式 CTRL-X CTRL-U
"拼写建议 CTRL-X CTRL-S

"################### SQLUtilities(sqlutil)|此插件依赖Align插件 sql格式化 ######################
Bundle 'Align'
Bundle 'SQLUtilities'
let g:sqlutil_keyword_case = '\U'    "sql关键字转换为大写
map sf :SQLUFormatter<CR>

"keywords map
"vmap <leader>sf <Plug>SQLU_Formatter<CR>
"nmap <leader>scl <Plug>SQLU_CreateColumnList<CR>
"nmap <leader>scd <Plug>SQLU_GetColumnDef<CR>
"nmap <leader>scdt <Plug>SQLU_GetColumnDataType<CR>
"nmap <leader>scp <Plug>SQLU_CreateProcedure<CR>
"let g:sqlutil_load_default_maps = 1
"更多配置参考,help sqlutil
"
"使用sqlutilities执行格式化:
"v 进入可视化模式，选中要格式化的语句，然后:'<,'>SQLUFormatter 或
"命令模式下执行 :始行号,末行号SQLUFormatter 另外还有两种方法help sqlutilities有描述。
"此插件还有许多选项供调整格式化后的语句样式可参考帮助文件。
"
"zs use:
"选中要格式化的sql, sf进行格式化

"ext:
"
"vimball是一个vim插件，可以很方便地帮你安装vba格式的vim插件。
"
"貌似vim自带有vimball（vim7.3以后自带）。
"
"直接用vim打开vba格式的文件，输入:so %即可安装，然后:q退出。
"
"删除插件也很方便，直接在vim里输入:RmVimball 插件名
"
"注: 一般不用安装vimBall

"################### dbext.vim vim直接访问数据库,支持多种数据库 |对于我暂时无用,而且上手难道偏大 ######################
"Bundle 'dbext.vim'


"################### nodejs ide config ######################
"nodejs-snippets
"复制snippets文件夹到snipmate\snippets。见line 220
Bundle 'jamescarr/snipmate-nodejs.git'

"Vim Dictionary for Node.js
Bundle 'guileen/vim-node.git'
"添加字典文件
"au FileType javascript set dictionary+=$VIM.'\vimfiles\dict\node.dict'
au FileType js call AddJSFuncList()
function AddJSFuncList()
    "配置 字典文件路径
    set dictionary-=$HOME/.vim/bundle/vim-node/node.dict dictionary+=$HOME/.vim/bundle/vim-node/node.dict
    "快捷键映射,<C-X><C-K>
    set complete-=k complete+=k
endfunction
"只有当文件类型是js的时候,我才会加载node.dict的词典

"Vim代码提示 for Node.js
"复制after文件夹到~\vimfiles\after
"使用方法：在编辑js代码时候，按ctrl-x和ctrl-o进入提示模式。
Bundle 'myhere/vim-nodejs-complete.git'


"################### Python ide config ######################
"近期,要求Python开发,需要配置 ide ...


"################### Golang ide config ######################


"################### Ruby config ######################


"################### Markdown config ######################
"Bundle 'plasticboy/vim-markdown'


"################### HTML/JS/JQUERY/CSS config ######################
"还需要持续配置, 2014-09-30

"JavaScript语法高亮插件
Bundle 'pangloss/vim-javascript'
" 打开javascript折叠
let b:javascript_fold=1
" 启动对 javascript对dom、html和css的高亮支持
let javascript_enable_domhtmlcss=1

"js/html/css 代码格式化
"jsbeautify js代码格式化
Bundle 'maksimr/vim-jsbeautify'
"map <c-f> :call JsBeautify()<cr>
" Ctrl + f 快捷键冲突 修改为Ctrl + p快捷键
map <c-p> :call JsBeautify()<cr>
" or
autocmd FileType javascript noremap <buffer>  <c-p> :call JsBeautify()<cr>
" for html
autocmd FileType html noremap <buffer> <c-p> :call HtmlBeautify()<cr>
" for css or scss
autocmd FileType css noremap <buffer> <c-p> :call CSSBeautify()<cr>

" jQuery 语法发高亮| 自动补全,还有待研究...
Bundle 'nono/jquery.vim'
au BufRead,BufNewFile jquery.*.js set ft=javascript syntax=jquery
"
Bundle 'lucapette/vim-jquery-doc'
Bundle 'jrue/Vimeo-jQuery-API'

"javascript 字典补全,未配置

"javascript语法检查插件,jshint,zs亲测可用
"1.install jshint
"npm install jshint -g      "http://www.jshint.com/install/
"2.安装vim jshint插件,使用 Bundle插件管理器安装
"3.usage
":help jshint | :JSHint
"注：参考 本文中jshint2.vim配置
Bundle 'walm/jshint.vim.git'
"
"VIM中针对语法检查的扩展应用，可以更准确的定位到语法错误点。js语法,有问题
"Bundle 'scrooloose/syntastic.git'
":help syntastic

"emmet html快速编辑
Bundle 'mattn/emmet-vim'
"zs注释：
"参考./bundle/emmet-vim/README.mkd文件，也顺便学习一下markdown的语法
"http://www.ruanyifeng.com/blog/2013/06/emmet_and_haml.html
"usage:[快捷键，都是在不同模式下使用]
"Emmet使用按键"<Ctrl+y>/"，让一个代码块变成HTML注释
"用"<Ctrl+y>,"将其转成HTML代码
"
"Bundle插件安装方式，不起作用，不知道为何；因此用下面的方式
"此方式有效
"git clone https://github.com/mattn/emmet-vim.git
"cd emmet-vim
"cp plugin/emmet.vim ~/.vim/plugin/
"cp autoload/emmet.vim ~/.vim/autoload/
"cp -a autoload/emmet ~/.vim/autoload/

"kchmck/vim-coffee-script coffeescript,未配置
"Bundle 'kchmck/vim-coffeescript'
"groenewege/vim-less less,未配置
"Bundle 'groenewege/vim-less'
"mbriggs/mark.vim,变量标记和检查,未配置
"Bundle 'mbriggs/mark.vim'

""jshint2.vim
"未配置好，暂时不使用
""https://github.com/vim-scripts/jshint2.vim
"Bundle 'jshint2.vim'
""set runtimepath+=~/.vim/bundle/jshint2.vim/
""
""configuration
""
""linux 用 whereis jshint ,查看jshint可执行文件路径
""Set global JSHint command path (mostly for Windows):
""jshint可执行文件目录
"let jshint2_command = '/usr/local/bin/jslint'
""Lint JavaScript files after reading it:
"let jshint2_read = 1
"
""Lint JavaScript files after saving it:
"let jshint2_save = 1
"
""Do not automatically close orphaned error lists:
"let jshint2_close = 0
"
""Skip lint confirmation for non JavaScript files:
"let jshint2_confirm = 0
"
""Do not use colored messages:
"let jshint2_color = 0
"
""Hide error codes in error list (if you don't use error ignoring or error codes confuses you):
"let jshint2_error = 0
"
""Set default height of error list:
"let jshint2_height = 20
"
""Quick lint mapping:
"" jshint validation
"nnoremap <silent><F2> :JSHint<CR>
"inoremap <silent><F2> <C-O>:JSHint<CR>
"vnoremap <silent><F2> :JSHint<CR>
""
"" show next jshint error
"nnoremap <silent><F3> :lnext<CR>
"inoremap <silent><F3> <C-O>:lnext<CR>
"vnoremap <silent><F3> :lnext<CR>
""
"" show previous jshint error
"nnoremap <silent><F4> :lprevious<CR>
"inoremap <silent><F4> <C-O>:lprevious<CR>
"vnoremap <silent><F4> :lprevious<CR>
""
""zs注：
""需要安装 nodejs & jshint
""1.nodejs编译安装，省略
""2.npm install jshint | npm install jshint -g  #http://jshint.com/install/
""3.有问题

"json高亮
Bundle 'elzr/vim-json'

"vim-css-color css颜色展示
"Bundle 'skammer/vim-css-color'
"Bundle 'https://github.com/gorodinskiy/vim-coloresque.git'
"
