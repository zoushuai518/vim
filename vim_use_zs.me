vim常用快捷键:
{
	
	普通模式:
	{
		移动:
		{
			h	左移光标一个字符
			l	右移光标一个字符
			k	光标上移一行
			j	光标下移一行
			#--
			w:向前,移动一个单词
			#--
			fx：移动光标到当前行的下一个 x 处。很明显，x 可以是任意一个字母 { 或者 (|{|- 等特殊字符 }，而且你可以使用 ; 来重复你的上一个 f 命令。
			tx：和上面的命令类似，但是是移动到 x 的左边一个位置。（这真的很有用）
			Fx：和 fx 类似，不过是往回找。使用 , 来重复上一个F命令。
			Tx：和 tx 类似，不过是往回移动到 x 的右边一个位置。
			b：光标往前移动一个词。
			w：光标往后移动一个词。
			0：移动光标到当前行首。（是数字0）
			^：移动光标到当前行的第一个字母位置。
			$：移动光标到行尾。
			)：移动光标到下一个句子。
			( ：移动光标到上一个句子。
			#--
			H：移动光标到屏幕上面
			M：移动光标到屏幕中间
			L：移动光标到屏幕下面
			#--
			%：在成对的括号等符号间移动，比如成对的 [ ] ， { }， ( ) 之间。将光标放到任意符号上，然后通过 % 来移动到和这个符号匹配的符号上，% 还可以正确的识别括号的嵌套层数，总是移动到真正匹配的位置上。因此这个命令在编辑程序代码的时候非常有用，可以让你方便的在一段代码的头尾间移动。	

			#--
			Ctrl+F       向下滚动一屏
			Ctrl+B       向上滚动一屏
			Ctrl+D       向下滚动一个单位（默认半屏）
			Ctrl+U       向上滚动一个单位（默认半屏）
			Ctrl+E       向下滚动一行
			Ctrl+Y       向上滚动一行
			zl           向右滚动一列（仅在禁用折行时有效）
			zh           向左滚动一列（同上注）
			zt           置当前行于屏首
			zt           置当前行于屏末
			zz           置当前行于屏中
			10z.         置第10行于屏中
			50z-         置第50行于屏末
			#--搜索移动
			*            正向搜索光标所在的单词（精确匹配）
			#            反向搜索光标所在的单词（精确匹配）
			g*           正向搜索光标所在的单词（模糊匹配）
			g#           反向搜索光标所在的单词（模糊匹配）
		}	

		搜索:
		{
			*：读取光标处的字符串，并且移动光标到它再次出现的地方。
			#：和上面的类似，但是是往反方向寻找。
			/text：从当前光标处开始搜索字符串 text，并且到达 text 出现的地方。必须使用回车来开始这个搜索命令。如果想重复上次的搜索的话，按 n移动到下个 text 处，N 移动到上一个 text 处 。
			？text：和上面类似，但是是反方向。
			#--
		}

		替换:
		{
			r:替换一个字符
			R:连续替换多个字符
			#--
			cw：更改光标所在处的字到字尾处
			c#w：例如，「c3w」表示更改3个字
			#--
			:s/p1/p2/g: 将当前行中所有p1均用p2替代
			:n1,n2s/p1/p2/g: 将第n1至n2行中所有p1均用p2替代
			:g/p1/s//p2/g: 将文件中所有p1均用p2替换
			#--添加注释
			批量注释：
			使用下面命令在指定的行首添加注释：
			:起始行号,结束行号s/^/注释符/g
			取消注释：
			:起始行号,结束行号s/^注释符//g
			例子：
			在2 - 8行添加 // 注释
			:2,8s#^#//#g
			在2 - 8行删除 // 注释
			:2,8s#^//##g
			在10 - 20行添加 # 注释
			:10,20s/^/#/g
			在10 - 20行删除 # 注释
			:10,20s/^#//g
			说明
			例子中正则的分割符使用的是#号，如果匹配// 那么使用 #作分隔符这样不需要对/作转义处理，节省输入次数
		}

		折叠:
		{
			折叠：zc / zm
			展开：zo / zr[zR | z+Shift+r]
			#--
			如果使用了indent方式，vim会自动的对大括号的中间部分进行折叠，我们可以直接使用这些现成的折叠成果。
			在可折叠处（大括号中间）：
			zc      折叠
			zC     对所在范围内所有嵌套的折叠点进行折叠 
			zo      展开折叠
			zO     对所在范围内所有嵌套的折叠点展开
			[z       到当前打开的折叠的开始处。
			]z       到当前打开的折叠的末尾处。
			zj       向下移动。到达下一个折叠的开始处。关闭的折叠也被计入。
			zk      向上移动到前一折叠的结束处。关闭的折叠也被计入

		}

		书签:
		{
			m{a-z}：在当前光标的位置标记一个书签，名字为 a-z 的单个字母。书签名只能是小写字母。你看不见书签的存在，但它确实已经在那里了。
			{:help mark {zs注} |删除标记 :delm a}
			`a：到书签 a 处。注意这个不是单引号，它一般位于大部分键盘的 1 的左边。
			`.：到你上次编辑文件的地方。这个命令很有用，而且你不用自己去标记它。
			#--
			:help mark
			#--
		}

		拷贝|删除|粘帖:
		{
			yy复制游标所在行整行。或大写一个Y。 
			2yy或y2y复制两行。 ㄟ ，请举一反三好不好！ :-) 
			y^复制至行首，或y0。不含游标所在处字元。 
			y$复制至行尾。含游标所在处字元。 
			yw复制一个word。 
			y2w复制两个字（单词）。 
			yG复制至档尾。 
			y1G复制至档首。 
			p小写p代表贴至游标后（下）。 
			P大写P代表贴至游标前（上）
			#--
			ndd：删除n行
			dj|h：删除当前行和下|上一行
			ndw：删除n个单词
			d^|$：删除光标到行首|尾处
			d0: 删至行首
			x或X: 删除一个字符，x删除光标后的，而X删除光标前的
			Ctrl+u: 删除输入方式下所输入的文本
			全部删除：按esc后，然后dG
			全部复制：按esc后，然后ggyG
		}

		数字&命令:
		{
			输入 . (小数点符号），将会重复你输入的上一个命令。比如，你上个命令为“dw”（删除一个词），VI 将会接着再删除一个词。	
			#--
			使用数字也是 VIM 强大的而且很节省时间的重要特性之一。在很多 VIM 的命令之前都可以使用一个数字，这个数字将会告诉 VIM 这个命令需要执行几次。比如：
			3j 将会把光标向下移动三行。
			10dd 将会删除十行。
			y3t″ 将会拷贝从当前光标到第三个出现的引号之间的内容到剪贴板。
			数字是扩展 motion 命令作用域非常有效的方法。
		}

		多文件编辑|窗口间切换:
		{
			ctrl+w,w：按住ctrl键，同时按下两次w键，从一个窗口切换到另一个窗口
			ctrl+w,l(或->)切换到右侧窗口
			ctrl+w,h(或<-)切换到左侧窗口
			ctrl+w,k(或上箭头)切换到上方窗口
			ctrl+w,j(或下箭头)切换到下方窗口
		}

		窗口操作:
		{
			改变窗口大小：
			#--
			resize +n  窗口增加n行
			resize -n  窗口减少n行
			vertical resize +n  增加n列
			vertical resize -n  减少n列

			ctrl+w,+/-:按住ctrl键，同时按下w键，然后再按下+（增大窗口）或-（减少窗口）(这时不按下ctrl键)。
			{height}CTRL-W, +/- 增加或减小窗口高度
			{width}CTRL-W, 增加或减小窗口的宽度
			#--
			1、水平窗口分割：
			:split（开启另一个窗口察看同一文件）
			:split 文件名（开启另一个窗口察看指定文件）
			:30split 打开一个高度为30的窗口
			2、垂直窗口分割：
			vsplit（开启另一个窗口察看同一文件）
			:vsplit 文件名（开启另一个窗口察看指定文件）
			:30vsplit 打开一个宽度为30的窗口
			3、同时打开文件，并在一个标签中显示在多个窗口中：
			vim -o file1 file2 file3 o水平打开多个窗口，O垂直打开多个窗口
		}

		diff:
		{
			http://www.ibm.com/developerworks/cn/linux/l-vimdiff/
			#--
			:diffsplit file		上下窗口显示
			:vertical diffsplit file	左右窗口显示
		}

		format:
		{
			n>>|<< {10>>|<<}   {v=}               同时向右/左缩进n|10个tab
			n|10 ==    {10=j | 10 ==}                      对其当前起下n|10行  
			V -> nG -> <<|>>                        向左/右移动选中行
			#--
			=a{ | =a( |=i{  ｛ =a{或者=i{ ｝                                          如果在方法体内，对齐整个函数体；如果在数组内，对整个数组进行对其
			gg =:1,$                                            对整个文件代码进行美化；{首先需要跳到代码的第一行，然后再输入=:1,$ } php测试通过
		
		}

		Other:
		{
			u: 撤销
			Ctrl + r ：取消撤销
			#--
			e:重载页面
			#--
			w:保存文件
			wq:保存退出
			q:退出
			q!:强制退出|不保存退出
			qall:关闭所有窗口
			only:关闭除当前窗口之外的文件
			#--
			vim上下两行交换位置：
			nxp 交换前后两个字符的位置 [nx：剪切n个字符，p黏贴]
			nddp  上下两行位置交换  [ndd：删除n行，p黏贴]
		}

		TAB:
		{
			TAB 就是制表符, 单独拿出来做一节是因为这个东西确实很有用.

			<< 输入此命令则光标所在行向左移动一个 tab.
			>> 输入此命令则光标所在行向右移动一个 tab.
			5>> 输入此命令则光标后 5 行向右移动一个 tab.
			:12,24> 此命令将12行到14行的数据都向右移动一个 tab.
			:12,24>> 此命令将12行到14行的数据都向右移动两个 tab.

			那么如何定义 tab 的大小呢? 有人愿意使用 8 个空格位, 有人用4个, 有的用2个.
			有的人希望 tab 完全用空格代替, 也有的人希望 tab 就是 tab. 没关系, vim 能
			帮助你.以下的设置一般也都先写入配置文件中, 免得老敲.

			:set shiftwidth=4 设置自动缩进 4 个空格, 当然要设自动缩进先.
			:set sts=4 即设置 softtabstop 为 4. 输入 tab 后就跳了 4 格.
			:set tabstop=4 实际的 tab 即为 4 个空格, 而不是缺省的 8 个.
			:set expandtab 在输入 tab 后, vim 用恰当的空格来填充这个 tab.
		}

		plug:
		{
		
		}

	}		

	可视模式:
	{
		V  {选择行,配合jk键}                                                         区域化操作    ；进入 可视 模式    ；会选中当前行
		{zs：V -> nG|j|k  ->x|y {进入可视化，选中此行起的n行，剪贴|复制} {V -> %}} 
		v shift+i       {zs ： v -> hl {v选择字符,配合hl键}}                 输入内容 然后tab键，操作应用到选中区块的多行
		#--
		在普通模式下，按下 v 、 V 、 Ctrl-V 将分别开启以字符、行或块为单位 的可视化模式，此后用户可以通过多次使用Vim的移动命令来选定所需文本。 例如，在普通模式下输入 v/the 并回车后，从光标初始处到此后最近的 the 之前都将被高亮
		#--
		v/zs-logo   光标初始处到此后最近的 zs-logo 之前都将被高亮
		#--
		v	按字符选择
		V	按行选择
		Ctrl + v	按列选择
	}

	插入模式:
	{
		i：在当前字符的左边插入
		I：在当前行首插入
		a：在当前字符的右边插入
		A：在当前行尾插入
		o：在当前行下面插入一个新行
		O：在当前行上面插入一个新行
		c{motion}：删除 motion 命令跨过的字符，并且进入插入模式。比如：c$，这将会删除从光标位置到行尾的字符并且进入插入模式。ct！，这会删除从光标位置到下一个叹号（但不包括），然后进入插入模式。被删除的字符被存在了剪贴板里面，并且可以再粘贴出来。
		d{motion}：和上面差不多，但是不进入插入模式
	}
	
	命令行模式 |末行模式:
	{
		esc -> : -> 进入此模式
	}
}
