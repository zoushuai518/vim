#zs注: zzzz 标识|zs经常使用
#ubuntu vim7.3

vim常用快捷键:
{

    普通模式:
    {
        移动:
        {
            h   左移光标一个字符
            l   右移光标一个字符
            k|nk    光标上移一|n行
            j|nj    光标下移一|n行
            J|Shift + j     折行    |zzzz
            #--
            w:向前,移动一个单词
            #--
            fx：移动光标到当前行的下一个 x 处。很明显，x 可以是任意一个字母 [ 或者 (|{|- 等特殊字符 ]，而且你可以使用 ; 来重复你的上一个 f 命令 , 使用 , 来反向查找。
            tx：和上面的命令类似，但是是移动到 x 的左边一个位置。（这真的很有用）
            Fx：和 fx 类似，不过是往回找。使用 ; 来重复上一个F命令。
            Tx：和 tx 类似，不过是往回移动到 x 的右边一个位置。
            b：光标往前移动一个词。
            w：光标往后移动一个词。
            e: 同w，只不过是光标停在单词尾部
            ge: 同b，光标停在单词尾部
            0：移动光标到当前行首。（是数字0）
            ^：移动光标到当前行的第一个字母位置。
            $：移动光标到行尾。
            )：移动光标到下一个句子。
            (：移动光标到上一个句子。
            #--
            H：移动光标到屏幕上面
            M：移动光标到屏幕中间
            L：移动光标到屏幕下面
            #--
            %：在成对的括号等符号间移动，比如成对的 [ ] ， { }， ( ) 之间。将光标放到任意符号上，然后通过 % 来移动到和这个符号匹配的符号上，% 还可以正确的识别括号的嵌套层数，总是移动到真正匹配的位置上。因此这个命令在编辑程序代码的时候非常有用，可以让你方便的在一段代码的头尾间移动。
            [[     跳转到代码块的开头去(但要求代码块中'{'必须单独占一行)
            ]p    和 p 的功能差不多，但是它会自动调整被粘贴的文本的缩进去适应当前代码的位置。试一下！
            >>    缩进所有选择的代码
            <<    和上面类似，但是反缩进
            gd    到达光标所在处函数或者变量的定义处。
            K    在 Man 里面查找光标当前所在处的词。
            ''    跳转到光标上次停靠的地方, 是两个', 而不是一个

            #--
            Ctrl+F       向下滚动一屏       |zzzz
            Ctrl+B       向上滚动一屏       |zzzz
            Ctrl+D       向下滚动一个单位（默认半屏）       |zzzz
            Ctrl+U       向上滚动一个单位（默认半屏）       |zzzz
            Ctrl+E       向下滚动一行
            Ctrl+Y       向上滚动一行
            zl           向右滚动一列（仅在禁用折行时有效）
            zh           向左滚动一列（同上注）
            zt           置当前行于屏首
            zt           置当前行于屏末
            zz           置当前行于屏中
            10z.         置第10行于屏中
            50z-         置第50行于屏末
            #--搜索移动
            *            正向搜索光标所在的单词（精确匹配）
            #            反向搜索光标所在的单词（精确匹配）
            g*           正向搜索光标所在的单词（模糊匹配）
            g#           反向搜索光标所在的单词（模糊匹配）

        }

        搜索/查找:
        {
            *：读取光标处的字符串，并且移动光标到它再次出现的地方。
            #：和上面的类似，但是是往反方向寻找。
            /text：从当前光标处开始搜索字符串 text，并且到达 text 出现的地方。必须使用回车来开始这个搜索命令。如果想重复上次的搜索的话，按 n移动到下个 text 处，N 移动到上一个 text 处 。       |zzzz
            ？text：和上面类似，但是是反方向。

            /|? -> Enter        输入搜索字符快速查找    |zzzz

            #--
            :set ignorecase     忽略大小写的查找
            :set noignorecase   不忽略大小写的查找
        }

        替换:
        {
            r:修改光标所在字符
            R:修改光标所在位置的字符，可以一直替换字符，知道按下ESC键
            #--
            cw：更改光标所在处的字到字尾处
            c#w：例如，「c3w」表示更改3个字
            #--
            :s/p1/p2/g: 将当前行中所有p1均用p2替代
            :n1,n2s/p1/p2/g: 将第n1至n2行中所有p1均用p2替代     | {101,107s/、/./g}
            :g/p1/s//p2/g: 将文件中所有p1均用p2替换
            #--添加注释
            批量注释：
            使用下面命令在指定的行首添加注释：
            :起始行号,结束行号s/^/注释符/g
            取消注释：
            :起始行号,结束行号s/^注释符//g
            例子：
            在2 - 8行添加 // 注释
            :2,8s#^#//#g
            在2 - 8行删除 // 注释
            :2,8s#^//##g
            在10 - 20行添加 # 注释
            :10,20s/^/#/g
            在10 - 20行删除 # 注释
            :10,20s/^#//g
            说明
            例子中正则的分割符使用的是#号，如果匹配// 那么使用 #作分隔符这样不需要对/作转义处理，节省输入次数

            #==
            未完待需......

        }

        折叠:
        {
            折叠：zc / zm       |zzzz
            展开：zo / zr[zR | z+Shift+r]       |zzzz
            #--
            如果使用了indent方式，vim会自动的对大括号的中间部分进行折叠，我们可以直接使用这些现成的折叠成果。
            在可折叠处（大括号中间）：
            zc      折叠
            zC      对所在范围内所有嵌套的折叠点进行折叠
            zo      展开折叠
            zO      对所在范围内所有嵌套的折叠点展开
            [z      到当前打开的折叠的开始处。
            ]z      到当前打开的折叠的末尾处。
            zj      向下移动。到达下一个折叠的开始处。关闭的折叠也被计入。
            zk      向上移动到前一折叠的结束处。关闭的折叠也被计入

        }

        书签:
        {
            m{a-z}：在当前光标的位置标记一个书签，名字为 a-z 的单个字母。书签名只能是小写字母。你看不见书签的存在，但它确实已经在那里了。       |zzzz
            {:help mark {zs注} |删除标记 :delm a}       |zzzz
            `a：到书签 a 处。注意这个不是单引号，它一般位于大部分键盘的 1 的左边。      |zzzz
            `.：到你上次编辑文件的地方。这个命令很有用，而且你不用自己去标记它。        |zzzz
            #--
            :help vim命令 :查看vim对应命令的帮助|可能要借助,vimdoc文档;可以到官网下载vimdoc,vimdoc中文最新文档已经更新到 vim7.3
            :help mark
            #--
            :helptags /etc/vim/doc  :导入帮助文件
            :helptags $VIM/vimfiles/doc :导入帮助文件
        }

        拷贝|删除|粘帖:
        {
            yy复制游标所在行整行。或大写一个Y。
            2yy或y2y复制两行。 ㄟ ，请举一反三好不好！ :-)
            y^复制至行首，或y0。不含游标所在处字元。
            y$复制至行尾。含游标所在处字元。
            yw复制一个word。
            y2w复制两个字（单词）。
            yG复制至档尾。
            y1G复制至档首。
            p小写p代表贴至游标后（下）
            P大写P代表贴至游标前（上） | shift+p
            #--
            ndd：删除n行
            dk|j：删除当前行和下|上一行
            ndw：删除n个单词
            d^|$：删除光标到行首|尾处
            d0: 删至行首
            nx或X: 删除n个字符，x删除光标后的，而X删除光标前的
            Ctrl+u: 删除输入方式下所输入的文本
            全部删除：按esc后，然后dG
            全部复制：按esc后，然后ggyG
            D:将光标所在行后面所有的单词删除
            n+d+左方向键        连续按d和左方向键，将光标所在位置前n个字符删除
            n+d+右方向键        将光标所在位置字符+后n个删除
            n+d+上方向键        将光标所在位置行与其上n行同时删除
            n+d+下方向键        将光标所在位置与下n行同时删除|ndd
            J(shift + j)　　删除两行之间的空行，实际上是合并两行
        }

        数字&命令:
        {
            输入 . (小数点符号），将会重复你输入的上一个命令。比如，你上个命令为“dw”（删除一个词），VI 将会接着再删除一个词。
            #--
            使用数字也是 VIM 强大的而且很节省时间的重要特性之一。在很多 VIM 的命令之前都可以使用一个数字，这个数字将会告诉 VIM 这个命令需要执行几次。比如：
            3j 将会把光标向下移动三行。
            10dd 将会删除十行。
            y3t″ 将会拷贝从当前光标到第三个出现的引号之间的内容到剪贴板。
            数字是扩展 motion 命令作用域非常有效的方法。
        }

        多文件编辑|窗口间切换:
        {
            ctrl+w,w：按住ctrl键，同时按下两次w键，从一个窗口切换到另一个窗口
            ctrl+w,l(或->)切换到右侧窗口
            ctrl+w,h(或<-)切换到左侧窗口
            ctrl+w,k(或上箭头)切换到上方窗口
            ctrl+w,j(或下箭头)切换到下方窗口
        }

        窗口操作:
        {
            改变窗口大小：
            #--
            resize +n  窗口增加n行
            resize -n  窗口减少n行
            vertical resize +n  增加n列
            vertical resize -n  减少n列

            ctrl+w,+/-:按住ctrl键，同时按下w键，然后再按下+（增大窗口）或-（减少窗口）(这时不按下ctrl键)。
            {height}CTRL-W, +/- 增加或减小窗口高度
            {width}CTRL-W, 增加或减小窗口的宽度
            #--
            1、水平窗口分割：
            :split（开启另一个窗口察看同一文件）
            :split 文件名（开启另一个窗口察看指定文件）
            :30split 打开一个高度为30的窗口
            2、垂直窗口分割：
            vsplit（开启另一个窗口察看同一文件）
            :vsplit 文件名（开启另一个窗口察看指定文件）
            :30vsplit 打开一个宽度为30的窗口
            3、同时打开文件，并在一个标签中显示在多个窗口中：
            vim -o file1 file2 file3 o水平打开多个窗口，O垂直打开多个窗口
            #--

        }

        diff:
        {
            http://www.ibm.com/developerworks/cn/linux/l-vimdiff/
            #--
            :diffsplit file     上下窗口显示
            :vertical diffsplit file    左右窗口显示
        }

        format:
        {
            n>>|<< {10>>|<<}   {v=}               同时向右/左缩进n|10个tab
            n|10 ==    {10=j | 10 ==}             对其当前起下n|10行
            V -> nG -> <<|>>                      向左/右移动选中行
            #--
            =a{ | =a( |=i{  [ =a{或者=i{ ]        如果在方法体内，对齐整个函数体；如果在数组内，对整个数组进行对其
            {}内对齐：  用 V选择多行,按 =
            gg=:1,$                               格式化, 对整个文件代码进行美化；{首先需要跳到代码的第一行，然后再输入=:1,$ } php测试通过       |zzzz
            #--
            set nu : 显示行号
            set fileencoding=utf8 : 显示|设置文件编码
            #--
            :set ff=unix -> 设定文件成unix格式 (set file in unix format)
            :set ff=dos -> 设定文件成dos格式 (set file in dos format)
            :set ff? -> 检查当前文件格式 (check the format of current file)
            如果改变格式，直接:w存档就会存成新的格式了
            #--
            :syntax enable -> 打开语法的颜色显示 (turn on syntax color)
            :syntax clear -> 关闭语法颜色 (remove syntax color)
            :syntax off -> 完全关闭全部语法功能 (turn off syntax)
            :syntax manual -> 手动设定语法 (set the syntax manual, when need syntax use :set syntax=ON)

        }

        Other:
        {
            u: 撤销
            U:取消对行所作的所有改变
            Ctrl + r ：取消撤销
            #--
            :e:重载页面     |:e filename 在vim中再打开文件
            :e! 放弃所有修改，并打开原来文件
            :r filename     读入一个文件内容,并写入到当前编辑器中
            vim +n filename     进入文件第n行进行编辑
            #--
            :w:保存文件
            :wq:保存退出
            :wqa:保存关闭所有窗口退出
            ZZ:保存退出
            :q:退出
            :q!:强制退出|不保存退出
            :qa!:不保存,关闭所有窗口强制退出
            qall [qa]:关闭所有窗口
            only:关闭除当前窗口之外的文件
            #--
            vim上下两行交换位置：
            nxp 交换前后两个字符的位置 [nx：剪切n个字符，p黏贴]     |xp交换当前字符和其后一个字符
            nddp  上下两行位置交换  [ndd：删除n行，p黏贴]           |ddp交换当前行和其下一行
            #--
            Ctrl+g    在最后一行中显示光标所在位置的行数及文章的总行数
            #--
            `.（跳转到最近修改过的位置）
            ZQ（无条件退出）
            ZZ（存盘退出）
            ga（显示光标下的字符在当前使用的 encoding 下的内码）
            guw（光标下的单词变为小写）
            gUw（光标下的单词变为大写）
            :TOhtml（根据 Vim 的语法加亮的方式生成 HTML 代码；在图形界面中也可以使用菜单“Syntax?Convert to HTML”达到同样效果）
            #--
            ctrl + x 自定义 ;ctrl + u^n^p   用户自定补全

            #--
            vim注释、删除 快捷键    zzzz
            注释：ctrl+v 进入列编辑模式,向下或向上移动光标,把需要注释的行的开头标记起来,然后按大写的I,再插入注释符,比如"//",再按Esc,就会全部注释了。
            删除：按ctrl+v 进入列编辑模式,向下或向上移动光标,选中注释部分,然后按d|x,就会删除注释符号。

            #--
            使用替换命令：
            :%s/^/\/\//g来在全部内容的行首添加//号注释
            :2,50s/^/\/\//g在2~50行首添加//号注释
            反过来替换既是删除操作。

            :%s/vivian/sky/（等同于 :g/vivian/s//sky/） 替换每一行的第一个 vivian 为 sk
            :%s/vivian/sky/g（等同于 :g/vivian/s//sky/g） 替换每一行中所有 vivian 为 sky

            vim中去掉每行末尾的^M
            :%s/^M$//g
            注意命令中的^M 是通过键入"CTRL-V CTRL-M"生成的！
            该命令的意思是 “去掉所有行末的^M”

            #--
            :sh
            #进入shell命令行,执行完命令后ctrl+d退出重新进入vim编辑继续编辑      |zzzz
            在shell命令下，执行ctrl+l完成清屏

            #--
            [ubuntu 平台测试可用; 次快捷键是 ubuntu的快捷键,在终端可用]
            Ctrl + -            缩小文字
            ctrl + Shift + +    放大文字

            #--
            显示历史命令
            q:      |zzzz

        }

        TAB:
        {
            TAB 就是制表符, 单独拿出来做一节是因为这个东西确实很有用.
            << 输入此命令则光标所在行向左移动一个 tab.
            >> 输入此命令则光标所在行向右移动一个 tab.
            5>> 输入此命令则光标后 5 行向右移动一个 tab.
            :12,24> 此命令将12行到14行的数据都向右移动一个 tab.
            :12,24>> 此命令将12行到14行的数据都向右移动两个 tab.
            #--
            那么如何定义 tab 的大小呢? 有人愿意使用 8 个空格位, 有人用4个, 有的用2个.
            有的人希望 tab 完全用空格代替, 也有的人希望 tab 就是 tab. 没关系, vim 能
            帮助你.以下的设置一般也都先写入配置文件中, 免得老敲.
            #--
            除了split之外， vim还可以用 tab
            :tab split filename -> 这个就用tab的方式来显示多个文件 (use tab to display buffers)
            gt -> 到下一个tab (go to next tab)
            gT -> 到上一个tab (go to previous tab)
            vim大多数东西都是可一给数字来执行的，tab也是一样
            0gt ->跳到第一个tab (switch to 1st tab)
            5gt -> 跳到第五个tab (switch to 5th tab)
            #--
            :set shiftwidth=4 设置自动缩进 4 个空格, 当然要设自动缩进先.
            :set sts=4 即设置 softtabstop 为 4. 输入 tab 后就跳了 4 格.
            :set tabstop=4 实际的 tab 即为 4 个空格, 而不是缺省的 8 个.
            :set expandtab 在输入 tab 后, vim 用恰当的空格来填充这个 tab.
            #--TAB键补全
            Ctrl+X Ctrl+L    整行补全
            Ctrl+X Ctrl+N     根据当前文件里关键字补全
            Ctrl+X Ctrl+I     根据头文件内关键字补全
            Ctrl+X Ctrl+]     根据标签补全
            Ctrl+X Ctrl+F     补全文件名
            Ctrl+X Ctrl+D     补全宏定义
            Ctrl+X Ctrl+V     补全vim命令
            Ctrl+X Ctrl+U     用户自定义补全方式
            Ctrl+X Ctrl+S     拼写建议
        }

        plug:
        {

        }

    }

    可视模式:
    {
        V  {选择行,配合jk键}                                                         区域化操作    ；进入 可视 模式    ；会选中当前行
        {zs：V -> nG|j|k  ->x|y {进入可视化，选中此行起的n行，剪贴|复制} {V -> %}}
        v shift+i       {zs ： v -> hl {v选择字符,配合hl键}}                 输入内容 然后tab键，操作应用到选中区块的多行
        #--
        在普通模式下，按下 v 、 V 、 Ctrl-V 将分别开启以字符、行或块为单位 的可视化模式，此后用户可以通过多次使用Vim的移动命令来选定所需文本。 例如，在普通模式下输入 v/the 并回车后，从光标初始处到此后最近的 the 之前都将被高亮
        #--
        v/zs-logo   光标初始处到此后最近的 zs-logo 之前都将被高亮
        #--
        v   按字符选择
        V   按行选择
        Ctrl + v    按列选择        |zzzz

        #==
        正常模式下按v（逐字）或V（逐行）进入可视模式，然后用jklh命令移动即可选择某些行或字符，再按y即可复制

    }

    插入模式:
    {
        i：在当前字符的左边插入
        I：在当前行首插入
        a：在当前字符的右边插入
        A：在当前行尾插入
        o：在当前行下面插入一个新行
        O：在当前行上面插入一个新行
        c{motion}：删除 motion 命令跨过的字符，并且进入插入模式。比如：c$，这将会删除从光标位置到行尾的字符并且进入插入模式。ct！，这会删除从光标位置到下一个叹号（但不包括），然后进入插入模式。被删除的字符被存在了剪贴板里面，并且可以再粘贴出来。
        d{motion}：和上面差不多，但是不进入插入模式
    }

    命令行模式 |末行模式:
    {
        esc -> : -> 进入此模式
    }

    ex模式介绍:
    {
        ex命令由一个行号和一个命令组成，比如1p，1是行号，p是print命令
        在vi中输入大写的Q进入ex模式，在ex模式中输入vi进入vi
        ex命令用来操作一个块
        #--
        几个ex常用命令:
        {
            delete      缩写为d
            move        缩写为m
            copy        缩写为co,还有一个缩写是t
        }
        #--
        使用:
        {
            ex命令中，你需指定行的地址来执行命令;你可以用三种方式来指定行地址
            一个是绝对的行号；
            一个是根据你当前位置得到的相对位置；
            一个是搜索到的位置。

            simple demo:
            {
                :3,18d          删除3到18行的内容
                :150，180m23    把150到180这个块移动到23行后面
                :23,38co100     把前面的部分拷贝到100行后面
            }

        }
    }

}


# from network  
{
    缓冲区
    {
        vim file1 file2 多个文件调入缓冲
        :efilename   在vim中再打开文件
        :ls          列出所有的缓冲区       |zzzz
        :n           编辑下一个文件
        :bp          跳转到上一个缓冲区
        :bn          跳转到下一个缓冲区
        :bN          跳转到指定编号的缓冲区:b3
        :bd1         删除编号为1的缓冲区
        :bd          关闭当前缓冲区     |zzz
    }

    标签
    {
        :tabnew   打开新标签页
        :tabe     <file>在新标签页打开文件
        :tabnext, tabprev 切换标签页，Putty 下只能用这个
        <ctrl> + PageUp, PageDown 切换标签页.
    }

    快捷插入
    {
        esc 切换命令模式 (距离太遥远了，用 Ctrl+C 代替吧).
        i 插入模式.
        I 在当前行开头插入.
        R 替换模式.
        a 在光标后插入.
        A 在当前行尾部插入.
        o 将在光标所在行下面加入一行，并进入编辑模式。
        O 将在光标上面加入一行,注意是大写。
        v Visual 模式按字符选择.
        V Visual 模式按行选择.
    }

    光标移动
    {
        h 左移光标.
        j 下移光标.
        k 上移光标.
        l 右移光标.
        gg 将光标移到文件头部.
        G 将光标移到文件尾部.
#G 移动光标到指定行#. 例如: 5G
        % 跳转到配对的括号去
        [[ 跳转到代码块的开头去(但要求代码块中’{‘必须单独占一行)
        gD 跳转到局部变量的定义处
        ” 跳转到光标上次停靠的地方, 是两个’, 而不是一个”
        mx 设置书签,x只能是a-z的26个字母
        `x 跳转到书签处(“`”是1左边的键)
        fx：移动光标到当前行的下一个 x 处。很明显，x 可以是任意一个字母，而且你可以使用 ; 来重复你的上一个 f 命令。
        tx：和上面的命令类似，但是是移动到 x 的左边一个位置。（这真的很有用）
        Fx：和 fx 类似，不过是往回找。
          
        w : 向后词移动　（前面加数字移动多少个词）
        b : 向前词移动　（前面加数字移动多少个词）
        e : 向后移到词末
        ge : 向前移到词末
          
        0：移动光标到当前行首。
        ^：移动光标到当前行的第一个字母位置。
        $：移动光标到行尾。
        )：移动光标到下一个句子。
        ( ：移动光标到上一个句子
        tx : 向右查找本行的x并移到那儿（大写时向左）
        33G : 移到文件的第33行
        gg : 文件首行
        G : 文件尾行
        33% : 文件的33%处
        H/M/L : 屏幕的首/中/尾行
        zt/zz/zb : 当前行移到屏幕的首/中/底部
    }

    复制粘贴删除
    {
        yy 拷贝当前行到剪贴板.
        nyy 复制从当前行开始的n行
        y^ 从文件头开始拷贝.
        y$ 拷贝到文件尾部.
        :#,&y 拷贝 # 到 & 行. 例如: 4,5y
        p 在光标后粘贴.
        P 粘贴到光标前.
        dd 删除当前行.
        d^ 删除到行首.
        d$ 删除到行尾.
        :#,&d 删除 # 到 & 行. 例如: 3,5d
        D 当前光标开始删除到行尾
        ndd 从当前行开始向后删除n行
        d1G 删除第1行到当前行的数据
        dnG 删除第n行到当前行的数据
        dG 删除当前行到最后一行的数据
        x 向后删除1个字符
        nx 向后删除n个字符
        X 向前删除1个字符
    }

    缩进
    {
        >> 增大缩进.
        << 减少缩进.
        == 自动缩进.
    }

    查找替换
    {
        /# 查找 #. 例如: /printf
        ?# 反向查找 #.
        n 查找下一个.
        N 反向查找下一个.
        :s/old/new/g 当前行无提示替换.
        :%s/old/new/g 无提示替换.
        :%s/old/new/gc 确认替换.
        :#,&s/old/new/g 从 # 到 & 行无提示替换.
        *  查找光标所在单词
    }

    书签跳转
    {
        :marks 查看所有书签, 输入 “:<num>” 可跳转.
        m<name> 定义书签, 如 ma 在当前行定义名为 a 的书签.
        `<name> 跳转到某书签, “`” 为键盘 Tab 上一行第一键.
        :jumps 查看所有跳转记录, 输入 “:<num>” 可跳转.
        <ctrl> + o 返回上一次跳转处.
        <ctrl> + i 和 <ctrl> + o 反向转处.
    }

    Ctags
    {
        :! ctags -R . 生成 ctags 文件.      |:! ctags -R * ./ 生成 ctags 文件
        <ctrl> + ] 查看函数定义.
        <ctrl> + T 返回.
        shift + k 查看函数 man 帮助信息.
    }

    执行外部 command: |zzz
    {
        :! <command> 执行命令. :! ifconfig
        :r <file> 插入文件内容.
        :r ! <command> 插入命令输出结果. :r ! ifconfig
        :w ! <command> 插入命令输出结果. :w ! ifconfig
        :cd <path> 修改默认工作目录.
        :pwd 查看当前文件所属目录.
    }

    自动补全
    {
        Ctrl+X Ctrl+L整行补全
        Ctrl+X Ctrl+N 根据当前文件里关键字补全
        Ctrl+X Ctrl+K 根据字典补全
        Ctrl+X Ctrl+T 根据同义词字典补全
        Ctrl+X Ctrl+I 根据头文件内关键字补全
        Ctrl+X Ctrl+] 根据标签补全
        Ctrl+X Ctrl+F 补全文件名
        Ctrl+X Ctrl+D 补全宏定义
        Ctrl+X Ctrl+V 补全vim命令
        Ctrl+X Ctrl+U 用户自定义补全方式
        Ctrl+X Ctrl+S 拼写建议
    }

    分屏
    {
        分屏启动Vim    注释: n是数字，表示分成几个屏。
        vim -On file1 file2 …     使用大写的O参数来垂直分屏。
        vim -on file1 file2 …   使用小写的o参数来水平分屏。
        Ctrl+w c   关闭分屏  关闭当前窗口。
        Ctrl+w q    关闭当前窗口，如果只剩最后一个了，则退出Vim

        分屏
        Ctrl+w s        上下分割当前打开的文件。
        :sp filename    上下分割，并打开一个新的文件。
        Ctrl+w v        左右分割当前打开的文件。
        :vsp filename   左右分割，并打开一个新的文件。

        移动光标    Vi中的光标键是h, j, k, l，要在各个屏间切换，只需要先按一下Ctrl+W
        Ctrl+w l    把光标移到右边的屏。
        Ctrl+w h    把光标移到左边的屏中。
        Ctrl+w k    把光标移到上边的屏中。
        Ctrl+w j    把光标移到下边的屏中。
        Ctrl+w w    把光标移到下一个的屏中。.

        移动分屏    这个功能还是使用了Vim的光标键，只不过都是大写。当然了，如果你的分屏很乱很复杂的话，这个功能可能会出现一些非常奇怪的症状。
        Ctrl+w L    向右移动。
        Ctrl+w H    向左移动
        Ctrl+w K    向上移动
        Ctrl+w J    向下移动

        屏幕尺寸    下面是改变尺寸的一些操作，主要是高度，对于宽度你可以使用Ctrl+W <或是>，但这可能需要最新的版本才支持。
        Ctrl+w =    让所有的屏都有一样的高度。
        Ctrl+w +    增加高度。
        Ctrl+w -    减少高度。
        ctrl+w >    向右扩展
        ctrl+w <    向左扩展
    }

    其它
    {
        gg=G 源码格式化
        :e! 强行重新编辑
        shift insert 从系统拷贝到vim
        u 撤销上一步操作.
        U 撤销最后编辑的行上的操作
        * . 重做.
    }

    zs:
    {
        通过查看:version可知Vim配置文件分为三类：
        :version
         系统 vimrc 文件: "$VIM/vimrc"
         用户 vimrc 文件: "$HOME/.vimrc"
         用户 exrc 文件: "$HOME/.exrc"
         $VIM 预设值: "/usr/share/vim"

         :echo $VIM
         :echo $VIMRUNTIME
         :scriptname

         --
         vimrc /usr/share/vim/vimrc

         --
         Ctrl+w+v 复制当前窗口文件到一个新的窗口
    }
}
